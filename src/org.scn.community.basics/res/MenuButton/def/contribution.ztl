
/**
 * Generated ZTL Class for MenuButton
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.MenuButton extends org.scn.community.shared.Component {

	/**
	 * Clean All Buttons from the Array.
	 */	
	void cleanAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Buttons from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Sets Url For Default Image Property
	 */	
	void setDefaultImage( /**Url For Default Image*/ String defaultImage){*
		this.defaultImage = defaultImage;
	*}

	/**
	 * Gets Url For Default Image Property
	 */	
	String getDefaultImage() {*
		return this.defaultImage;
	*}

	/** Adds an element containing parentKey [String], key [String], text [String], url [String], enabled [boolean] properties.
	 * You need to specify a unique and existing parent element.

 	<example>
	You want to add 2 elements
	<code>
	MENUBUTTON.addSubItem(parentKey [String], key [String], text [String], url [String], enabled [boolean]);<br>
	MENUBUTTON.addSubItem(parentKey [String], key [String], text [String], url [String], enabled [boolean]);
	</code>
	</example>
	 */
	void addSubItem (
			/**Parent Key*/String parentKey, 
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/optional String url, 
			/**Enabled*/optional boolean enabled
			) {*		
		
		var leaf = (parentKey != "ROOT");
		
		if(url == undefined) { url = "";}
		if(enabled == undefined) { enabled = false;}
		
		var itemDef = {
			leaf:leaf,
			parentKey:parentKey, 
			key:key, 
			text:text, 
			url:url, 
			enabled:enabled 
			};
	
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/** Adds a root element containing key [String], text [String], url [String], enabled [boolean].

 	<example>
	You want to add 2 root elements
	<code>
	MENUBUTTON.addItem(key [String], text [String], url [String], enabled [boolean]);<br>
	MENUBUTTON.addItem(key [String], text [String], url [String], enabled [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void addItem (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/optional String url, 
			/**Enabled*/optional boolean enabled
			) {*		
		
		this.addSubItem("ROOT", key, 
			text, 
			url, 
			enabled);
	*}
	
	/** removes an element by String key properties.
	 * You need to specify a unique and existing key.

 	<example>
	You want to remove element
	<code>
	MENUBUTTON.removeSubItem(String key);<br>
	</code>
	</example>
	 */
	void removeSubItem (
			String key
			) {*		
		
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	MENUBUTTON.removeItem(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeItem (
			String key
			) {*		
		
		this.removeSubItem(key);
	*}

	/**
	 * Gets Items As JSON String
	 */	
	String getItemsAsJSON() {*
		var jsonObject = JSON.parse(this.elementsContent);
		return JSON.stringify(jsonObject, null, 4);
	*}
	
	/**
	 * Sets the Text for Item keys<br/>
	 */
	void setItemTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Item Key<br/>
	 */
	void setItemText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Item Key<br/>
	 */
	String getItemText (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Url for Item keys<br/>
	 */
	void setItemUrls (
			/**/ String keys,
			/**/ String separator,
	        /* Url */ String url
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].url = url;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Url for Item Key<br/>
	 */
	void setItemUrl (
			/**/ String key,
			/**/ String url
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].url = url;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Url for Item Key<br/>
	 */
	String getItemUrl (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].url;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Enabled for Item keys<br/>
	 */
	void setItemEnableds (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].enabled = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].enabled = true;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Enabled for Item Key<br/>
	 */
	void setItemEnabled (
			/**/ String key,
			/**/ boolean enabled
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].enabled = enabled;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Enabled of Item keys<br/>
	 */
	void cleanAllItemEnableds (
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].enabled = false;
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Enabled for Item Key<br/>
	 */
	String getItemEnabled (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].enabled;
				break;
			}
		}
		
		return value;
	*}

	/**
	 * Returns the Enabled keys<br/>
	 */
	org.scn.pack.KeyArray getItemEnabledKeysArray (
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].enabled == true) {
				newElementsJson.push(elementsJson[i]);
			}
		}
		
		return newElementsJson;
	*}
	/**
	 * Sets the Text for SubItem keys<br/>
	 */
	void setSubItemTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for SubItem Key<br/>
	 */
	void setSubItemText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for SubItem Key<br/>
	 */
	String getSubItemText (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Url for SubItem keys<br/>
	 */
	void setSubItemUrls (
			/**/ String keys,
			/**/ String separator,
	        /* Url */ String url
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].url = url;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Url for SubItem Key<br/>
	 */
	void setSubItemUrl (
			/**/ String key,
			/**/ String url
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].url = url;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Url for SubItem Key<br/>
	 */
	String getSubItemUrl (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].url;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Enabled for SubItem keys<br/>
	 */
	void setSubItemEnableds (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].enabled = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].enabled = true;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Enabled for SubItem Key<br/>
	 */
	void setSubItemEnabled (
			/**/ String key,
			/**/ boolean enabled
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].enabled = enabled;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Enabled of SubItem keys<br/>
	 */
	void cleanAllSubItemEnableds (
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].enabled = false;
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Enabled for SubItem Key<br/>
	 */
	String getSubItemEnabled (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].enabled;
				break;
			}
		}
		
		return value;
	*}

	/**
	 * Returns the Enabled keys<br/>
	 */
	org.scn.pack.KeyArray getSubItemEnabledKeysArray (
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].enabled == true) {
				newElementsJson.push(elementsJson[i]);
			}
		}
		
		return newElementsJson;
	*}


	/**
	 * Sets Enabled Property
	 */	
	void setEnabled( /**Enabled*/ boolean enabled){*
		this.enabled = enabled;
	*}

	/**
	 * Gets Enabled Property
	 */	
	boolean isEnabled() {*
		return this.enabled;
	*}

	/**
	 * Sets Icon Property
	 */	
	void setIcon( /**Icon*/ String icon){*
		this.icon = icon;
	*}

	/**
	 * Gets Icon Property
	 */	
	String getIcon() {*
		return this.icon;
	*}



	/**
	 * Gets Technical Proprty For Selected Key Property
	 */	
	String getSelectedKey() {*
		return this.selectedKey;
	*}

	/**
	 * Gets Technical Proprty For Selected Text Property
	 */	
	String getSelectedText() {*
		return this.selectedText;
	*}

	/**
	 * Sets Text Value Property
	 */	
	void setText( /**Text Value*/ String text){*
		this.text = text;
	*}

	/**
	 * Gets Text Value Property
	 */	
	String getText() {*
		return this.text;
	*}

	/**
	 * Sets Tooltip Value Property
	 */	
	void setTooltip( /**Tooltip Value*/ String tooltip){*
		this.tooltip = tooltip;
	*}

	/**
	 * Gets Tooltip Value Property
	 */	
	String getTooltip() {*
		return this.tooltip;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	// here is the place for other custom functions

	/**
	 * Adds a root element containing Key, Text, Image Url information.<br/>
	 * <example><br/>
	 * You want to add 2 root elements, second one is a sibling of first one<br/>
	 * <code><br/>
	 * MENUBUTTON_1.addMenuItem("ROOT_KEY1", "First Root Element", "");<br/>
	 * MENUBUTTON_1.addMenuItem("ROOT_KEY2", "Second Root Element", "");<br/>
	 * </code><br/>
	 * </example><br/>
	 */
	@Visibility(deprecated)
	void addMenuItem (
			/*Element Key (must be unique)*/ String elementKey,
			/*Element text*/ String elementText,
			/*Image URL if not set no image*/ String imageUrl,
			/*Leafs do not have expand option by default*/ optional boolean isLeaf,
			/*item enabled flag*/ optional boolean isEnabled
			
			) 
	{*
		this.addSubMenuItem(elementKey, elementText, imageUrl, "ROOT", isLeaf, isEnabled);
	*}
	/**
	 * Adds an element containing Key, Text, Image Url, Parent Element and is Leaf information.<br/>
	 * You need to specify a unique and existing parent element.<br/>
	 * if Parent Element is set to "ROOT" then the element will be inserted as root element.<br/>
	 * <example><br/>
	 * You want to add 2 items, second one is a child of first one<br/>
	 * <code><br/>
	 * MENUBUTTON_1.addSubMenuItem("KEY1", "First Element", "", "ROOT", true);<br/>
	 * MENUBUTTON_1.addSubMenuItem("KEY2", "First Element Child", "", "KEY1", true);<br/>
	 * </code><br/>
	 * </example><br/>
	 */
	@Visibility(deprecated)
	void addSubMenuItem (
			/*Element Key (must be unique)*/ String elementKey,
			/*Element text*/ String elementText,
			/*Image URL if not set no image*/ String imageUrl,
			/*The Key of the parent Element*/ String parentElementKey,
			/*Leafs do not have expand option by default*/ optional boolean isLeaf,
			/*item enabled flag*/ optional boolean isEnabled
			
			) 
	{*
		if(isLeaf == undefined) {
			isLeaf = true;
		}
			
		if(isEnabled == undefined){
			isEnabled = true;
		}
		
		var itemDef = { 
			"key": elementKey, 
			"text": elementText, 
			"url": imageUrl,
			"parentKey": parentElementKey,
			"leaf": isLeaf,
			"enabled": isEnabled
			};
	
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Remove all Buttons<br/>
	 */
	@Visibility(deprecated)
	void removeAllElements (
			
			) 
	{*
		var elementsArray = [];
			this.elementsContent = JSON.stringify(elementsArray);
			
			this.cleanAll = true;
	*}
	
}
