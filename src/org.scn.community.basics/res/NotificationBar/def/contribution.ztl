
/**
 * Generated ZTL Class for NotificationBar
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.NotificationBar extends org.scn.community.shared.Component {



	/**
	 * Sets Connect To Common Messages Property
	 */	
	void setConnectToCommonMessages( /**Connect To Common Messages*/ boolean connectToCommonMessages){*
		this.connectToCommonMessages = connectToCommonMessages;
	*}

	/**
	 * Gets Connect To Common Messages Property
	 */	
	boolean isConnectToCommonMessages() {*
		return this.connectToCommonMessages;
	*}

	/**
	 * Sets Url For Default Image Property
	 */	
	void setDefaultImage( /**Url For Default Image*/ String defaultImage){*
		this.defaultImage = defaultImage;
	*}

	/**
	 * Gets Url For Default Image Property
	 */	
	String getDefaultImage() {*
		return this.defaultImage;
	*}

	/**
	 * Sets Delete Notification When Clicked Property
	 */	
	void setDeleteNotificationOnClick( /**Delete Notification When Clicked*/ boolean deleteNotificationOnClick){*
		this.deleteNotificationOnClick = deleteNotificationOnClick;
	*}

	/**
	 * Gets Delete Notification When Clicked Property
	 */	
	boolean isDeleteNotificationOnClick() {*
		return this.deleteNotificationOnClick;
	*}





	/**
	 * Sets Remove All Notifications When Minimized Property
	 */	
	void setRemoveAllOnMinimize( /**Remove All Notifications When Minimized*/ boolean removeAllOnMinimize){*
		this.removeAllOnMinimize = removeAllOnMinimize;
	*}

	/**
	 * Gets Remove All Notifications When Minimized Property
	 */	
	boolean isRemoveAllOnMinimize() {*
		return this.removeAllOnMinimize;
	*}

	/**
	 * Sets Show Notification Bar When New Notifications Are Available Property
	 */	
	void setShowOnNewNotifications( /**Show Notification Bar When New Notifications Are Available*/ boolean showOnNewNotifications){*
		this.showOnNewNotifications = showOnNewNotifications;
	*}

	/**
	 * Gets Show Notification Bar When New Notifications Are Available Property
	 */	
	boolean isShowOnNewNotifications() {*
		return this.showOnNewNotifications;
	*}

	/**
	 * Sets Split Notifications By Priority Property
	 */	
	void setSplitNotificationsByPriority( /**Split Notifications By Priority*/ boolean splitNotificationsByPriority){*
		this.splitNotificationsByPriority = splitNotificationsByPriority;
	*}

	/**
	 * Gets Split Notifications By Priority Property
	 */	
	boolean isSplitNotificationsByPriority() {*
		return this.splitNotificationsByPriority;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	/** 
	 * Add Category
	 */
	void addCategory (
			/**Category Key*/String categoryKey, 
			/**Category Text*/String categoryText, 
			/**Category Image*/String categoryImage)
	{*

		var categoryDef = {
				"key": categoryKey,
				"text": categoryText,
				"image": categoryImage
				};
			
		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			this.categories = "[]";
		}

		var caregoriesJson = JSON.parse(this.categories);
		caregoriesJson.push(categoryDef);
		
		this.categories = JSON.stringify(caregoriesJson);
	*}

	/**
	 * Add an Error Notification
	 */
	void addErrorNotification (
			/**Notification Text */String notificationText,
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey 
			)
	{*
		this.addNotification(notificationText, "ERROR", categoryKey, "");
	*}
			
	/**
	 * Add a Warning Notification
	 */
	void addWarningNotification (
			/**Notification Text */String notificationText,
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey 
			)
	{*
		this.addNotification(notificationText, "WARNING", categoryKey, "");
	*}

	/**
	 * Add an Info Notification
	 */
	void addInfoNotification (
			/**Notification Text */String notificationText,
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey 
			)
	{*
		this.addNotification(notificationText, "INFO", categoryKey, "");
	*}

	/**
	 * Add a Success Notification
	 */
	void addSuccessNotification (
			/**Notification Text */String notificationText,
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey 
			)
	{*
		this.addNotification(notificationText, "SUCCESS", categoryKey, "");
	*}

	/** 
	 * Add Notification
	 * 
	 */
	void addNotification (
			/**Notification Text */String notificationText, 
			/**Notification Level (ERROR|WARNING|INFO|SUCCESS) */String notificationLevel, 
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey, 
			/**Optional: Notification Key */ optional String notificationKey)
	{*
		var itemDef = { 
				"category": categoryKey,
				"key": notificationKey, 
				"text": notificationText, 
				"level": notificationLevel
				};

		if (this.notifications === undefined || this.notifications === "" || this.notifications === "<delete>"){
			this.notifications = "[]";
		}
		
		var notificationsJson = JSON.parse(this.notifications);
		notificationsJson.push(itemDef);

		this.notifications = JSON.stringify(notificationsJson);
	*}
	
	/**
	 * Minimize notification bar (for example on timeout event of TIMEOUT component)
	 */
	void minimizeBar(){*
		this.minimize = calcTimestamp();
	*}
	
	@Visibility(private)
	/**
	 *	Workaround for strange DesignStudio lifecycle handling when calling functions via scriptting triggers
	 */
	String calcTimestamp() {*
		return new Date().valueOf();
	*}
}
