
/**
 * Component created with collaboration with Michael Howles
 * http://scn.sap.com/people/mike.howles4
 * 
 * based on the blog thread
 * http://scn.sap.com/community/businessobjects-design-studio/blog/2014/09/16/design-studio-sdk--bial-fornext-loop-and-my-first-github-co-author-attempt
 * 
 * Authors: Michael Howles, Scn Community Contributors
 */
class org.scn.community.utils.Debugger extends org.scn.community.shared.Component {  

	/**
	 * Returns active flag
	 */
	boolean isActive() {*  
		return this.DActive;  
	*}  

	/**
	 * Sets active flag
	 */
	void setActive(boolean value) {*  
		this.DActive = value;
	*}

	/**
	 * Returns log active flag
	 */
	boolean isLogActive() {*  
		return this.DLogActive;  
	*}  

	/**
	 * Sets log active flag
	 */
	void setLogActive(boolean valu) {*  
		this.DLogActive = value;
	*}

	/**
	 * Only for Use in SDK Development in ZTL code!
	 */
	void openZtl(Object thisValue, Object locals) {*
		if(this.DActive != true) {
			return;
		}
	
		this.internal_assureGlobalAccess();
		
		this.toConsole("Component [ENTRY] : " + thisValue._VariableName, true);
		this.private_inspect(thisValue, locals);
	*}
	
	/**
	 * Only for Use in SDK Development in ZTL code!
	 */
	void exitZtl(Object thisValue, Object locals) {*
		if(this.DActive != true) {
			return;
		}
	
		this.internal_assureGlobalAccess();
		
		this.toConsole("Component [EXIT] : " + thisValue._VariableName, true);
		this.private_inspect(thisValue, locals);
	*}

	/**
	 * Inspection Function for Use in BIAL Event Sctips.
	 * You can use it to inspect the GLOBAL VARIABLES and also Components (see optional parameters)
	 * 
	 * In case of "standard" components it does not show much, but on SDK components it shows calues of all internal propertes.
	 */
	void inspectNow(optional String comment, optional Component thisValue) {*
		if(this.DActive != true) {
			return;
		}
	
		this.internal_assureGlobalAccess();
		
		if(comment == undefined) {comment="";}
		
		if(thisValue == undefined) {
			thisValue = {};
		}
		
//		if(thisValue._VariableName == undefined) {
//			thisValue._VariableName = comment;
//		}
		
		this.toConsole("Component [CUSTOM] : " + thisValue._VariableName, true);
		this.private_inspect(thisValue, undefined, undefined, true);
	*}

	/**
	 * Inspects only given JSON property
	 */
	void inspectJSONProperty (optional String comment, optional JSON property) {*
		if(this.DActive != true) {
			return;
		}
	
		this.internal_assureGlobalAccess();
		
		if(comment == undefined) {comment="";}

		var thisValue = {};
		
		var locals = {};
		locals.property = property;
		
		this.toConsole("Component [CUSTOM] : " + thisValue._VariableName, true);
		this.private_inspect(thisValue, locals, undefined, true);
	*}
		
	/**
	 * Only for Use in SDK Development in ZTL code!
	 */
	void processZtlException(String thisValue, Object locals, Object exception) {*
		if(this.DActive != true) {
			return;
		}
	
		this.internal_assureGlobalAccess();
		
		this.toConsole("Component [EXCEPTION] : " + thisValue._VariableName, true);
		this.private_inspect(thisValue, locals, exception);
	*}

	/**
	 * Only for Use in SDK Development in ZTL code!
	 */
	void inspectZtl(Object thisValue, Object locals, Object exception) {*
		if(this.DActive != true) {
			return;
		}
		
		this.internal_assureGlobalAccess();
		
		this.toConsole("Component [INSPECT] : " + thisValue._VariableName, true);
		this.private_inspect(thisValue, locals, exception);
	*}
	
	/**
	 * Private Inspection Method.
	 * Do not Use externally, API can be changed here!
	 */
	void private_inspect(Object thisValue, Object locals, Object exception, optional boolean fullScope) {*
		if(this.DActive != true) {
			return;
		}
	
		var that = this;
	
		if(fullScope==undefined) {
			fullScope = false;
		}
		
		var lStack = undefined;
		if(this.DStack == "") {
			lStack = [];
		} else {
			lStack = JSON.parse(this.DStack);
		}
		
		var lVariables = undefined;
		if(this.DVariables == "") {
			lVariables = [];
		} else {
			lVariables = JSON.parse(this.DVariables);
		}
	
		var l = {};

		l.mydate = new Date();
		l.date = l.mydate.toString("yyyymmddhhmmss");
		l.date = l.date + " - " + l.mydate.getSeconds() + "," + l.mydate.getMilliseconds();
		
		l.stackEntry  = {};
	
		this.internal_assureGlobalAccess();
		
		var method = this.getCallingMethod();
		var line = 0;
		if(method.indexOf(":") > -1) {
			line = method.substring(method.indexOf(":") + 1);
			if(line.indexOf("\n") > -1) {
				line = line.substring(0, line.indexOf("\n"));
			}
			method = method.substring(0, method.indexOf(":"));
		}
		
		if(method == undefined || method == "") {
			method = thisValue._VariableName;
		}
		
		this.toConsole("Calling Method: " + method);
		
		l.stackEntry["method"] = method;
		l.stackEntry["date"] = l.date;
		l.stackEntry["line"] = line;
		l.stackEntry["component"] = thisValue._VariableName;
		
		if(that.DGlobals) {
			// globals
			this.toConsole("GLOBALS");
			var globalScope = this.getGlobal();
			for (var name in globalScope) {
				var something = globalScope[name];
	
				if(something == undefined) {
					continue;
				}
				
				try {
					var value = globalScope[name];
					
					if(value.indexOf("com.sap.ip.bi.zen") > -1) {
						// internal object
						this.toConsole("  " + name + "=" + value);
						continue;
					}
					
					this.toConsole("  " + name + "=" + value);
					lVariables.push({"date":l.date, "name":name, "value":value, "type":"global"});
				} catch (e) {
					// ignore
				}
			}
		}

		if(that.DOwner) {
			// owner
			this.toConsole("OWNER ? "+(thisValue != undefined));
			if(thisValue) {
				
				if(thisValue.getOwner) {
					var owner = thisValue.getOwner();
					
					if(owner) {
						lVariables.push({"date":l.date, "item-type":name, "value":owner.getItemType(), "type":"info"});
						lVariables.push({"date":l.date, "item-name":name, "value":owner.getName(), "type":"info"});
					}
				}
				
				for (var name in thisValue) {
					try {
						if(!fullScope && name.indexOf("_VariableName") > -1) {
							continue;
						}
						
						if(name.indexOf("MARGIN") > -1 || name.indexOf("margin") > -1) {
							this.toConsole("  " + name + "=<not read>");	
							continue;
						}
						
						var value = thisValue[name];
						
						if(!fullScope && value.indexOf("function") > -1) {
							// internal function
							this.toConsole("  " + name + "=" + value);
							continue;
						}
		
						if(!fullScope && value.indexOf("com.sap.ip.bi.zen") > -1) {
							// internal object
							this.toConsole("  " + name + "=" + value);
							continue;
						}
		
						if(value.indexOf("{") == 0 || value.indexOf("[") == 0 || value.indexOf("object") > -1|| value.indexOf("org.mozilla.javascript.NativeArray") > -1) {
							var jValue = JSON.stringify(value);
							this.toConsole("  " + name + "=" + jValue);
							lVariables.push({"date":l.date, "name":name, "value":jValue, "type":"owner"});
						} else {
							this.toConsole("  " + name + "=" + value);
							lVariables.push({"date":l.date, "name":name, "value":value, "type":"owner"});
						}
					} catch (e) {
						lVariables.push({"date":l.date, "name":name, "value":"<read error>", "type":"owner"});
					}
				}
			}								
		}

		if(that.DLocals) {
			// locals
			this.toConsole("LOCALS ? "+(locals != undefined));
			if(locals != undefined) {
				for (var name in locals) {
					try {
						var value = locals[name];
	
						if(value.indexOf("{") == 0 || value.indexOf("[") == 0 || value.indexOf("object") > -1 || value.indexOf("org.mozilla.javascript.NativeArray") > -1) {
							var jValue = JSON.stringify(value);
							this.toConsole("  " + name + "=" + jValue);
							lVariables.push({"date":l.date, "name":name, "value":jValue, "type":"local"});
						} else {
							this.toConsole("  " + name + "=" + value);
							lVariables.push({"date":l.date, "name":name, "value":value, "type":"local"});
						}
					} catch (e) {
						lVariables.push({"date":l.date, "name":name, "value":"<read error>", "type":"local"});
					}
				}
			}
		}
		
		// callstack
		this.toConsole("CALLSTACK");
		
		var callstack = this.getCallStack(exception);
		this.toConsole(callstack);
		l.stackEntry["callstack"] = callstack;

		lStack.push(l.stackEntry);
		this.DStack = JSON.stringify(lStack);

		this.DVariables = JSON.stringify(lVariables);
	*}
	
	String getCallStack(optional Object exception) {*
		var stackValue = "";

		if(exception != undefined) {
			stackValue = stackValue + exception.stack;
		} else {
			try {
				var s;
				s.key = "a";	
			} catch (e) {
				stackValue = stackValue + e.stack;
			}
		}

		var indexOfCut = stackValue.indexOf("(private_inspect)") + "(private_inspect)".length;
		stackValue = stackValue.substring(indexOfCut);

		indexOfCut = stackValue.indexOf("at ") + "at ".length;;
		stackValue = stackValue.substring(indexOfCut);

		indexOfCut = stackValue.indexOf("at ");
		stackValue = stackValue.substring(indexOfCut);

		return stackValue;
	*}
	
	String getCallingMethod() {*
		var methodName = "";
		
		try {
			var s;
			s.key = "a";	
		} catch (e) {
			methodName = methodName + e.stack;
		}
		
		var indexOfCut = methodName.indexOf("(private_inspect)") + "(private_inspect)".length;
		if(indexOfCut > -1) {
			methodName = methodName.substring(indexOfCut);
			
			indexOfCut = methodName.indexOf("at ") + "at ".length;
			methodName = methodName.substring(indexOfCut);

			indexOfCut = methodName.indexOf("at ") + "at ".length;
			methodName = methodName.substring(indexOfCut);

			indexOfCut = methodName.indexOf(" (");
			methodName = methodName.substring(0, indexOfCut);
		}

		return methodName;
	*}
	
	/**
	 * you can use this method to push some code to console, APPLICATION.log(value).
	 * The difference is, you can activate or deactivate the function in properties w/o changes in the code.
	 */
	void toConsole(String value, optional boolean withDate) {*
		if(withDate) {
			var mydate = new Date();
			var date = mydate.toString('dddd MMM yyyy h:mm:ss');
			value = date + ": " + value;
		}
		this.DConsole = this.DConsole + value + "\r\n";
		
		if(this.DLogActive) {
			APPLICATION.log(value);	
		}
	*}

	/**
	 * Returns Console Content
	 */
	String getConsole() {*
		return this.DConsole;
	*}

	/**
	 * Clears Console Content
	 */
	void clearConsole() {*
		this.DConsole = "";
	*}
	
	/**
	 * Resets Completely the Content
	 */
	void reset() {*
		this.clearConsole();
		this.DStack = "[]";
		this.DVariables = "[]";
	*}
}
